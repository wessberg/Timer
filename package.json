{
  "name": "@wessberg/timer",
  "version": "1.0.0",
  "description": "A Timer is a timed task that will either execute once or once per interval. It is essentially 'setTimeout()' and 'setInterval()' for Node and the Browser, except with the additional option to stop and restart individual timers or all timers that is currently active. This is useful for stopping all timers when the app is inactive or is in a state where the timers don't need to run, but you still want to be able to resume them sometime in the future. A 'run()' operation returns a Promise that will resolve either when a timed interval stops or a timed one-off task is executed.",
  "main": "./dist/cjs/index.js",
  "module": "./dist/es2015/index.js",
  "browser": "./dist/es2015/index.js",
  "types": "./dist/es2015/index.d.ts",
  "typings": "./dist/es2015/index.d.ts",
  "scripts": {
    "clean:dist": "rm -r -f dist",
    "clean:compiled": "rm -r -f compiled",
    "clean": "npm run clean:dist & npm run clean:compiled",
    "build:pre": "npm run clean && mkdir -p dist/cjs/interface && mkdir -p dist/es2015/interface",
    "build:cjs": "tsc --module commonjs --outDir dist/cjs -p tsconfig.dist.json",
    "build:es2015": "tsc --module es2015 --outDir dist/es2015 -p tsconfig.dist.json",
    "build": "npm run build:pre && npm run build:cjs && npm run build:es2015",
    "test:pre": "npm run clean:compiled && tsc --module commonjs --target es2017 --sourceMap",
    "test": "NODE_ENV=TEST npm run test:pre && ava "
  },
  "keywords": [
    "timer",
    "setInterval",
    "setTimeout",
    "timers"
  ],
  "author": "Frederik Wessberg",
  "license": "MIT",
  "devDependencies": {
    "@types/node": "^8.0.4",
    "ava": "^0.19.1",
    "typescript": "^2.4.1"
  }
}
